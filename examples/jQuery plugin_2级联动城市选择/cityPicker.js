// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($, window, document) {
    $.fn.rollerPicker = function(options) {
      var Plugin, defaults, isMove;
      defaults = {
        url: '',
        num: 2,
        title: '请选择所在地区',
        initConfig: {
          province: '请选择',
          city: '请选择'
        },
        callback: function() {}
      };
      this.options = options;
      isMove = false;
      Plugin = (function() {
        function Plugin(self) {
          this.btnConfirmHandler = bind(this.btnConfirmHandler, this);
          if ($.isPlainObject(self.options)) {
            this.settings = $.extend({}, defaults, self.options);
          }
          this.$rollerCtn = self;
          this.init();
          return;
        }

        Plugin.prototype.init = function() {
          this.$rollerListBox = this.$rollerCtn.find('.m-roller-box');
          this.renderStaticComponents().renderRollerList();
          this.requestData((function(_this) {
            return function() {
              _this.renderData().cacheVar().setStyles().bindEvent().initRollerPos();
            };
          })(this));
          return this;
        };

        Plugin.prototype.renderStaticComponents = function() {
          var $mRollerTt, $mSctArea;
          $mRollerTt = '<div class="m-roller-tt">' + '<a class="u-btn-cancel">取消</a>' + '<h4 class="u-roller-tt">' + this.settings.title + '</h4>' + '<a class="u-btn-confirm">确认</a>' + '</div>';
          $mSctArea = '<div class="u-sct-area"></div>';
          this.$rollerCtn.prepend($mRollerTt).append($mSctArea);
          return this;
        };

        Plugin.prototype.renderRollerList = function() {
          var $mRollerBox, $mRollerList, i, k, ref;
          for (i = k = 0, ref = this.settings.num - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
            $mRollerBox = $('<div class="m-roller-ctn"></div>');
            $mRollerList = $('<ul class="m-roller-list"></ul>').data('listIndex', i);
            this.$rollerListBox.append($mRollerBox);
            $mRollerBox.append($mRollerList);
          }
          return this;
        };

        Plugin.prototype.setStyles = function() {
          var w;
          w = 100 / this.settings.num + '%';
          $('.m-roller-ctn').css('width', w);
          this.$rollerList.css({
            y: this.listMaxTopOffset
          });
          $('.u-sct-area').css('top', this.viewHeight / 2 + this.itemHeight + 'px');
          return this;
        };

        Plugin.prototype.requestData = function(callback) {
          var that;
          that = this;
          $.ajax({
            url: this.settings.url,
            type: 'POST',
            dataType: 'json',
            success: function(data, status, jqxhr) {
              if (data && $.isFunction(callback)) {
                that.data = data.data.tree;
                callback();
              }
            },
            error: function(xhr, status, err) {
              alert('请求数据出错');
            },
            complete: function() {}
          });
          return this;
        };

        Plugin.prototype.renderData = function() {
          var $cityItem, $cityList, $provinceItem, $provinceList, cityObj, i, j, k, l, len, len1, provinceObj, ref, ref1;
          this.$rollerList = $('.m-roller-list', this.$rollerCtn);
          $provinceList = this.$rollerList.eq(0);
          $cityList = this.$rollerList.eq(1);
          if (!arguments.length) {
            ref = this.data;
            for (i = k = 0, len = ref.length; k < len; i = ++k) {
              provinceObj = ref[i];
              $provinceItem = $('<li>' + provinceObj.value + '</li>').data('obj', provinceObj);
              $provinceList.append($provinceItem);
            }
          }
          if ($.isArray(arguments[0])) {
            $cityList.empty();
            ref1 = arguments[0];
            for (j = l = 0, len1 = ref1.length; l < len1; j = ++l) {
              cityObj = ref1[j];
              $cityItem = $('<li>' + cityObj.value + '</li>').data('obj', cityObj);
              $cityList.append($cityItem);
            }
            $cityList.css({
              y: arguments[1]
            });
          }
          return this;
        };

        Plugin.prototype.cacheVar = function() {
          this.$rollerBox = this.$rollerListBox.find('.m-roller-ctn');
          this.$rollerList = this.$rollerBox.find('.m-roller-list');
          this.itemHeight = this.$rollerList.children().first().height();
          this.viewHeight = this.$rollerListBox.height();
          this.listMaxTopOffset = (this.viewHeight - this.itemHeight) / 2;
          this.listMaxBottomOffset = this.$rollerList.height() - (this.listMaxTopOffset + this.itemHeight);
          this.$btnCancel = $('.u-btn-cancel', this.$rollerCtn);
          this.$btnConfirm = $('.u-btn-confirm', this.$rollerCtn);
          this.$d = $(document);
          return this;
        };

        Plugin.prototype.bindEvent = function() {
          var that;
          that = this;
          this.$rollerBox.on('mousedown touchstart', that.moveStartHandler.bind(that));
          this.$btnConfirm.on('click', that.btnConfirmHandler.bind(that));
          this.$btnCancel.on('click', that.btnCancelHandler.bind(that));
          return this;
        };

        Plugin.prototype.moveStartHandler = function(e) {
          var $curRollerBox, $curRollerList, curY, evt, mdOffsetY, oCurRollerBox, that;
          evt = e || event;
          evt.stopPropagation();
          oCurRollerBox = evt.currentTarget;
          $curRollerBox = $(oCurRollerBox);
          $curRollerList = $curRollerBox.find('ul');
          curY = parseInt($curRollerList.css('y').replace('px', ''));
          mdOffsetY;
          this.updateListMaxBottomOffset($curRollerList);
          if (evt.type === 'mousedown') {
            mdOffsetY = evt.clientY;
          }
          if (evt.type === 'touchstart') {
            mdOffsetY = evt.originalEvent.targetTouches[0].clientY;
          }
          if (isMove = true) {
            this._preventDocumentTouchDefault(evt);
            that = this;
            $curRollerBox.on('mousemove touchmove', {
              curY: curY,
              mdOffsetY: mdOffsetY,
              box: $curRollerBox
            }, that.movingHandler.bind(that));
            this.$d.on('mouseup touchend', {
              box: $curRollerBox
            }, that.moveEndHandler.bind(that));
          }
        };

        Plugin.prototype.movingHandler = function(e) {
          var $curRollerBox, $curRollerList, curY, evt, mmDistance, mmOffsetY, y;
          evt = e || event;
          evt.stopPropagation();
          mmOffsetY;
          mmDistance;
          y;
          $curRollerBox = evt.data.box;
          curY = evt.data.curY;
          $curRollerList = $curRollerBox.find('ul');
          if (evt.type === 'mousemove') {
            mmOffsetY = evt.clientY;
          }
          if (evt.type === 'touchmove') {
            mmOffsetY = evt.originalEvent.targetTouches[0].clientY;
          }
          mmDistance = mmOffsetY - evt.data.mdOffsetY;
          y = curY + mmDistance;
          if (y >= this.listMaxTopOffset) {
            y = this.listMaxTopOffset;
          } else if (y < -this.listMaxBottomOffset) {
            y = -this.listMaxBottomOffset;
          }
          $curRollerList.css({
            y: y
          });
        };

        Plugin.prototype.moveEndHandler = function(e) {
          var $curRollerBox, evt;
          evt = e || event;
          evt.stopPropagation();
          $curRollerBox = evt.data.box;
          this.$d.off('mouseup touchend');
          $curRollerBox.off('mousemove touchmove');
          isMove = false;
          this._fixRollerListTop($curRollerBox);
        };

        Plugin.prototype.initRollerPos = function() {
          $items;
          var $items, _setMarginTop, data, el, elem, idx, index, initCity, initProvince, k, l, len, len1, ref, that;
          initProvince = this.settings.initConfig.province;
          initCity = this.settings.initConfig.city;
          data;
          that = this;
          _setMarginTop = function(index) {
            var curPos, pos;
            pos = index * that.itemHeight;
            curPos = parseInt(this.css('y').replace('px', ''));
            this.css({
              y: curPos - pos
            });
          };
          ref = this.$rollerList;
          for (index = k = 0, len = ref.length; k < len; index = ++k) {
            elem = ref[index];
            $items = $(elem).children();
            for (idx = l = 0, len1 = $items.length; l < len1; idx = ++l) {
              el = $items[idx];
              data = $(el).data('obj').value;
              if ((index === 0 && initProvince === data) || (index === 1 && initCity === data)) {
                _setMarginTop.call($(elem), idx);
                that.linkAge($(elem));
              }
            }
          }
          return this;
        };

        Plugin.prototype.linkAge = function($rollerList) {
          var $curItem, $curItemKey, $nextItem, $nextRollerList, cityList, index, itemIndex, k, len, listIndex, nextItemIndex, provinceObj, ref;
          itemIndex = this._getCurrentItemIndex($rollerList);
          listIndex = $rollerList.data('listIndex');
          if (listIndex === 0) {
            $curItem = $rollerList.children().eq(itemIndex - 1);
            $curItemKey = $curItem.data('obj').key;
            $nextRollerList = $rollerList.parent().next().find('ul');
            this._setSelectItemStyle.call($curItem);
            ref = this.data;
            for (index = k = 0, len = ref.length; k < len; index = ++k) {
              provinceObj = ref[index];
              if ($curItemKey === provinceObj.key) {
                cityList = provinceObj.list;
              }
            }
            this.renderData.call($nextRollerList, cityList, this.listMaxTopOffset);
            nextItemIndex = this._getCurrentItemIndex($nextRollerList);
            $nextItem = $nextRollerList.children().eq(nextItemIndex - 1);
            this._setSelectItemStyle.call($nextItem);
          }
          if (listIndex === 1) {
            $nextItem = $rollerList.children().eq(itemIndex - 1);
            this._setSelectItemStyle.call($nextItem);
          }
        };

        Plugin.prototype.btnConfirmHandler = function() {
          if (this.$rollerCtn.exportData && this.$rollerCtn.exportData.length > 0) {
            this.$rollerCtn.exportData.length = 0;
          }
          this.hide();
          if ($.isFunction(this.settings.callback)) {
            this.settings.callback.call(this.$rollerCtn, this._getSelectData());
          }
        };

        Plugin.prototype.btnCancelHandler = function() {
          this.hide();
        };

        Plugin.prototype._getSelectData = function() {
          $rList;
          $item;
          itemIndex;
          var $item, $rList, i, itemIndex, k, ref, results;
          results = [];
          for (i = k = 0, ref = this.settings.num - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
            console.log(i);
            $rList = this.$rollerList.eq(i);
            itemIndex = this._getCurrentItemIndex($rList);
            $item = $rList.children().eq(itemIndex - 1);
            results.push($item.data('obj'));
          }
          return results;
        };

        Plugin.prototype.updateListMaxBottomOffset = function($rollerList) {
          this.listMaxBottomOffset = $rollerList.height() - (this.listMaxTopOffset + this.itemHeight);
        };

        Plugin.prototype.show = function() {
          this.$rollerCtn.show();
        };

        Plugin.prototype.hide = function() {
          this.$rollerCtn.hide();
        };

        Plugin.prototype._fixRollerListTop = function($rlBox) {
          var $rlList, curItemNum, curTop, fixY;
          $rlList = $rlBox.find('ul');
          curTop = parseInt($rlList.css('y').replace('px', ''));
          curItemNum;
          fixY;
          curItemNum = Math.round((this.listMaxTopOffset + this.itemHeight - curTop) / this.itemHeight);
          fixY = this.listMaxTopOffset - (curItemNum - 1) * this.itemHeight;
          $rlList.transition({
            y: fixY + 'px',
            duration: 200,
            easing: 'linear',
            complete: (function(_this) {
              return function() {
                return _this.linkAge($rlList);
              };
            })(this)
          });
        };

        Plugin.prototype._setSelectItemStyle = function() {
          var $item;
          $item = this;
          $item.siblings().removeAttr('class').end().addClass('select');
        };

        Plugin.prototype._setDateItemStyle = function() {
          var $dItem, dItemIndex;
          dItemIndex = this._getCurrentItemIndex(this.$rollerList.eq(2));
          $dItem = this.$rollerList.eq(2).children().eq(dItemIndex - 1);
          this._setSelectItemStyle.call($dItem);
        };

        Plugin.prototype._getCurrentItemIndex = function($rollerList) {
          var top;
          top = parseInt($rollerList.css('y').replace('px', ''));
          return Math.round((this.listMaxTopOffset + this.itemHeight - top) / this.itemHeight);
        };

        Plugin.prototype._preventDocumentTouchDefault = function(e) {
          var that;
          that = this;
          this.$d.on('touchmove mousemove', function() {
            return that._stopEvent(e);
          });
        };

        Plugin.prototype._stopEvent = function(e) {
          e.stopPropagation();
          e.preventDefault();
        };

        return Plugin;

      })();
      new Plugin(this);
    };
    return this;
  })(jQuery, window, document);

}).call(this);
